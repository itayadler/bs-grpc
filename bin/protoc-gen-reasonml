#!/usr/bin/env node
/* Why is protobufjs giving me JS Number values to represent protobufs
 * enum values when grpc gives me JS String values?
 *
 * https://github.com/dcodeIO/protobuf.js/issues/97
 */
const util = require('util')
const protobufs = require('../src/protobufs')
const { getRootModule } = require('../src/codegen/parser/get_root_module');
const { getModuleDependencies } = require('../src/codegen/parser/get_module_dependencies');
const { emitServerModule } = require('../src/codegen/server');
const { emitModule } = require('../src/codegen/module');
const { emitGrpc } = require('../src/codegen/grpc');
const { emitClient } = require('../src/codegen/client');
const { emitServerKeyAndCert } = require('../src/codegen/server_key_and_cert');

require('read-all-stream')(process.stdin, { encoding: null }).then(buf => {
  const req = protobufs.google.protobuf.compiler.CodeGeneratorRequest.decode(buf)
  const rootModule = getRootModule(req.protoFile)
  const moduleDeps = getModuleDependencies(rootModule)
  const moduleCode = emitModule(rootModule, moduleDeps, rootModule.packageName)
  const serverModuleCode = emitServerModule(rootModule)

  const grpcModuleCode = emitGrpc()
  const clientModuleCode = emitClient()
  const serverKeyAndCertModuleCode = emitServerKeyAndCert()

  const emission = grpcModuleCode
    + serverKeyAndCertModuleCode
    + moduleCode
    + serverModuleCode
    + clientModuleCode

  if (process.stdout.isTTY) {
    console.log('stdout is a TTY; printing human-readable data')
    console.log('output module tree:', util.inspect(rootModule, { depth: 99 }))
    console.log('output source code:')
    console.log(emission)
  } else {
    process.stdout.write(
      protobufs.google.protobuf.compiler.CodeGeneratorResponse.encode({
        file: [{
          name: 'Grpc.re',
          content: emission
        }]
      }).finish()
    )
  }
}).catch(err => {
  console.error(__filename, "error", err)
})
